{"version":3,"sources":["webpack:///./src/components/Feed/Feed.module.scss","webpack:///./src/components/Feed/Feed.js","webpack:///./src/components/Page/Page.module.scss","webpack:///./src/components/Page/Page.js","webpack:///./src/templates/tag-template.js"],"names":["module","exports","Feed","edges","className","styles","map","edge","parsedDate","Date","node","frontmatter","date","Intl","DateTimeFormat","year","month","day","timeZone","formatToParts","value","key","fields","slug","dateTime","to","title","categorySlug","category","Page","children","TagTemplate","data","pageContext","useSiteMetadata","siteTitle","siteSubtitle","subtitle","tag","allMarkdownRemark","pageTitle","description"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,WAAa,iCAAiC,mBAAmB,uCAAuC,wBAAwB,4CAA4C,uBAAuB,2CAA2C,0BAA0B,8CAA8C,gCAAgC,oDAAoD,KAAO,2BAA2B,mBAAmB,yC,gICiDlcC,EAxCF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,yBAAKC,UAAWC,IAAM,MACnBF,EAAMG,KAAI,SAACC,GACV,IAAMC,EAAa,IAAIC,KAAKF,EAAKG,KAAKC,YAAYC,MASlD,EARuB,IAAIC,KAAKC,eAAe,KAC7C,CACEC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,SAAU,QAOKC,cAAcX,GAHtBQ,EADX,KACII,MACOH,EAFX,KAEIG,MACOL,EAHX,KAGIK,MAGJ,OACE,yBAAKhB,UAAWC,IAAM,WAAgBgB,IAAKd,EAAKG,KAAKY,OAAOC,MAC1D,yBAAKnB,UAAWC,IAAO,oBACrB,0BAAMD,UAAWC,IAAO,wBAAyBmB,SAAaR,EAAL,IAAcC,EAAd,KAAsBF,GAC5EC,EADH,IACWD,GAEX,yBAAKX,UAAWC,IAAO,qBACrB,0BAAMD,UAAWC,IAAO,qBACtB,kBAAC,OAAD,CAAMD,UAAWC,IAAO,yBAA0BoB,GAAIlB,EAAKG,KAAKY,OAAOC,MAAOhB,EAAKG,KAAKC,YAAYe,QAEtG,0BAAMtB,UAAWC,IAAO,6BACxB,0BAAMD,UAAWC,IAAO,6BACtB,kBAAC,OAAD,CAAMoB,GAAIlB,EAAKG,KAAKY,OAAOK,aAAcvB,UAAWC,IAAO,kCAAmCE,EAAKG,KAAKC,YAAYiB,oB,qBCvCpI5B,EAAOC,QAAU,CAAC,KAAO,2BAA2B,YAAc,kCAAkC,YAAc,oC,kHCkBnG4B,EAXF,SAAC,GAAD,IAAGH,EAAH,EAAGA,MAAOI,EAAV,EAAUA,SAAV,OACX,yBAAK1B,UAAWC,IAAM,MACpB,yBAAKD,UAAWC,IAAM,aAClBqB,GAAS,wBAAItB,UAAWC,IAAM,aAAkBqB,GAClD,yBAAKtB,UAAWC,IAAM,YACnByB,O,kCCZT,wGAmEeC,UApDK,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,YAC3B,EAAqDC,cAAtCC,EAAf,EAAQT,MAA4BU,EAApC,EAA0BC,SAGxBC,EACEL,EADFK,IAGMnC,EAAU6B,EAAKO,kBAAfpC,MACFqC,EAAS,wBAA2BF,EAA3B,OAAqCH,EAC9CT,EAAK,wBAA2BY,EAEtC,OACE,kBAAC,IAAD,CAAQZ,MAAOc,EAAWC,YAAaL,GACrC,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMV,MAAOA,GACX,kBAAC,IAAD,CAAMvB,MAAOA,KAEf,kBAAC,IAAD","file":"component---src-templates-tag-template-js-5ab9dc0232ae8b2049ac.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"feed__item\":\"Feed-module--feed__item--2D5rE\",\"feed__item-title\":\"Feed-module--feed__item-title--3nigr\",\"feed__item-title-link\":\"Feed-module--feed__item-title-link--iFMRs\",\"feed__item-meta-time\":\"Feed-module--feed__item-meta-time--3t1fg\",\"feed__item-meta-divider\":\"Feed-module--feed__item-meta-divider--N-Q0A\",\"feed__item-meta-category-link\":\"Feed-module--feed__item-meta-category-link--23f8F\",\"feed\":\"Feed-module--feed--37QKH\",\"feed__item-inner\":\"Feed-module--feed__item-inner--1fgWN\"};","// @flow strict\nimport React from 'react';\nimport { Link } from 'gatsby';\nimport type { Edges } from '../../types';\nimport styles from './Feed.module.scss';\n\ntype Props = {\n  edges: Edges\n};\n\nconst Feed = ({ edges }: Props) => (\n  <div className={styles['feed']}>\n    {edges.map((edge) => {\n      const parsedDate = new Date(edge.node.frontmatter.date);\n      const dateTimeFormat = new Intl.DateTimeFormat('en',\n        {\n          year: 'numeric',\n          month: 'short',\n          day: '2-digit',\n          timeZone: 'UTC'\n        });\n\n      const [\n        { value: month },,\n        { value: day },,\n        { value: year }\n      ] = dateTimeFormat.formatToParts(parsedDate);\n\n      return (\n        <div className={styles['feed__item']} key={edge.node.fields.slug}>\n          <div className={styles['feed__item-meta']}>\n            <time className={styles['feed__item-meta-time']} dateTime={`${month} ${day}, ${year}`}>\n              {month} {year}\n            </time>\n            <div className={styles['feed__item-inner']}>\n              <span className={styles['feed__item-title']}>\n                <Link className={styles['feed__item-title-link']} to={edge.node.fields.slug}>{edge.node.frontmatter.title}</Link>\n              </span>\n              <span className={styles['feed__item-meta-divider']} />\n              <span className={styles['feed__item-meta-category']}>\n                <Link to={edge.node.fields.categorySlug} className={styles['feed__item-meta-category-link']}>{edge.node.frontmatter.category}</Link>\n              </span>\n            </div>\n          </div>\n        </div>\n      );\n    })}\n  </div>\n);\n\nexport default Feed;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Page-module--page--2nMky\",\"page__inner\":\"Page-module--page__inner--2M_vz\",\"page__title\":\"Page-module--page__title--GPD8L\"};","import React from 'react';\nimport styles from './Page.module.scss';\n\ntype Props = {\n  title?: string,\n  children: React.Node\n};\n\nconst Page = ({ title, children }: Props) => (\n  <div className={styles['page']}>\n    <div className={styles['page__inner']}>\n      { title && <h4 className={styles['page__title']}>{title}</h4>}\n      <div className={styles['page__body']}>\n        {children}\n      </div>\n    </div>\n  </div>\n);\n\nexport default Page;","// @flow strict\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Feed from '../components/Feed';\nimport Page from '../components/Page';\nimport Topbar from '../components/Topbar';\nimport Footer from '../components/Footer';\nimport { useSiteMetadata } from '../hooks';\nimport type { AllMarkdownRemark, PageContext } from '../types';\n\ntype Props = {\n  data: AllMarkdownRemark,\n  pageContext: PageContext\n};\n\nconst TagTemplate = ({ data, pageContext }: Props) => {\n  const { title: siteTitle, subtitle: siteSubtitle } = useSiteMetadata();\n\n  const {\n    tag,\n  } = pageContext;\n\n  const { edges } = data.allMarkdownRemark;\n  const pageTitle = `All Posts tagged as \"${tag}\" - ${siteTitle}`;\n  const title = `Articles tagged with ${tag}`;\n\n  return (\n    <Layout title={pageTitle} description={siteSubtitle}>\n      <Topbar />\n      <Page title={title}>\n        <Feed edges={edges} />\n      </Page>\n      <Footer />\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query TagPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n        subtitle\n      }\n    }\n    allMarkdownRemark(\n        filter: { frontmatter: { tags: { in: [$tag] }, template: { eq: \"post\" }, draft: { ne: true } } },\n        sort: { order: DESC, fields: [frontmatter___date] }\n      ){\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          frontmatter {\n            title\n            date\n            category\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagTemplate;\n"],"sourceRoot":""}