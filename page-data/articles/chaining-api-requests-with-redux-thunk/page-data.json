{"componentChunkName":"component---src-templates-post-template-js","path":"/articles/chaining-api-requests-with-redux-thunk","result":{"data":{"markdownRemark":{"id":"80be7a36-b5f4-52cf-a236-63e5079a268b","html":"<p>I recently came upon a simple problem where I couldn’t find an easy solution to, on the Google or SO. However, I did find the parts to the answer, and put them together to get this working.</p>\n<p>My problem was finding a way to chain API requests using redux-thunk and axios. My use case was to gather an array of objects(containing id’s) on the first API request, and then subsequently gather each individual objects’ data from the array above, using the id, through another API request, all asynchronously.</p>\n<p><img src=\"/1f155b660dcfb01cc399bcdb15ca672e/thunk_example.gif\" alt=\"thunk_example\"></p>\n<p>I was able to solve this in redux-thunk by making two actions; one to fetch all, and one to fetch each individually. And, to chain them together, we treat each action as a promise(they return axios promises), then let redux-thunk do it’s magic. To get the array of objects in the first API request, we can use getState() from the first promise.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestIssuesAndIssueData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch<span class=\"token punctuation\">,</span> getState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">requestIssues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> issuesArr <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>issues<span class=\"token punctuation\">.</span>issuesById<span class=\"token punctuation\">;</span>\n      issuesArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">issue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">requestIssueCommentsHash</span><span class=\"token punctuation\">(</span>issue<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the snippet above I am using GitHub issues as an example.</p>\n<p>To see the entire example, checkout my repo at <a href=\"https://github.com/aaronvb/redux-thunk-chain-api-requests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/aaronvb/redux-thunk-chain-api-requests</a>.</p>\n<p>To see it in action I setup a demo project at <a href=\"https://aaronvb.github.io/redux-thunk-chain-api-requests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://aaronvb.github.io/redux-thunk-chain-api-requests</a>.</p>\n<p>Happy hacking!</p>","fields":{"slug":"/articles/chaining-api-requests-with-redux-thunk","tagSlugs":["/tag/code/","/tag/java-script/","/tag/react/","/tag/redux/","/tag/thunk/"]},"frontmatter":{"date":"2018-02-07","description":"I recently came upon a simple problem where I couldn’t find an easy solution to, on the Google or SO. However, I did find the parts to the answer, and put them together to get this working.","tags":["Code","JavaScript","React","Redux","Thunk"],"title":"Chaining API requests with redux-thunk","legacyArticleId":null}}},"pageContext":{"slug":"/articles/chaining-api-requests-with-redux-thunk"}},"staticQueryHashes":["2255556206","251939775","401334301"]}