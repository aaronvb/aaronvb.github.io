{"componentChunkName":"component---src-templates-post-template-js","path":"/articles/recurring-delayed-job-with-cron","result":{"data":{"markdownRemark":{"id":"41d7f017-61a4-5bfd-ab57-5ac8f4ade2e8","html":"<p>Do you need a delayed_job job to happen at certain times or intervals?</p>\n<p>This one is easy and I use it quite often - particularly to scrape data at certain times during the day, and generate nightly statistics and reports.</p>\n<p><strong>Why would I use delayed_job to handle recurring jobs over rake task?</strong>\nEvery time a rake task is issued, a new rails instance is spawned which takes time and memory to start and run. If a delayed_job daemon is already running, using that will save both. In my opinion, running a rake task that uses the rails environment is usually very costly in production and should be avoided if possible.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\">#!/usr/bin/env ruby</span>\n\n<span class=\"token comment\"># put this somewhere in your project, ie: /lib</span>\n<span class=\"token comment\"># use:</span>\n<span class=\"token comment\"># crontab -e</span>\n<span class=\"token comment\"># */30 * * * * /usr/bin/ruby /your_rails_project/lib/this_file.rb</span>\n<span class=\"token comment\"># that will insert this job into your delayed_job queue every 30 minutes.</span>\n\n<span class=\"token keyword\">require</span> <span class=\"token string\">'rubygems'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'mysql'</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">parse_args</span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span>empty<span class=\"token operator\">?</span>\n    str <span class=\"token operator\">=</span> <span class=\"token string\">'[]\\n\\n'</span>\n  <span class=\"token keyword\">else</span>\n    str <span class=\"token operator\">=</span> <span class=\"token string\">'\\n-'</span>\n    args<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>k<span class=\"token punctuation\">,</span>v<span class=\"token operator\">|</span>\n      str <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">' :'</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">.</span>to_s <span class=\"token operator\">+</span> <span class=\"token string\">': '</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">.</span>to_s <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">return</span> str\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Connect to database</span>\n<span class=\"token comment\"># replace these values with your own:</span>\n<span class=\"token comment\"># DB_USER is your database user</span>\n<span class=\"token comment\"># DB_PASSWORD is your database user password</span>\n<span class=\"token comment\"># DATABASE_NAME is your database name, ie: sample_app_development</span>\n\ndbh <span class=\"token operator\">=</span> <span class=\"token constant\">Mysql</span><span class=\"token punctuation\">.</span>real_connect<span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DB_USER\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DB_PASSWORD\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"DATABASE_NAME\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Get the current time in db format</span>\ndb_time <span class=\"token operator\">=</span> <span class=\"token builtin\">Time</span><span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Insert data into table</span>\n<span class=\"token comment\"># replace these values with your own:</span>\n<span class=\"token comment\"># YOUR_MODEL is your model</span>\n<span class=\"token comment\"># YOUR_METHOD is your method, or function</span>\n<span class=\"token comment\"># YOUR_ARGUMENTS are your agrument(s), ie {:nws => 4, :asdf => \"haha\"}</span>\n<span class=\"token comment\"># leave blank if no arguments</span>\n\nmodel <span class=\"token operator\">=</span> <span class=\"token string\">\"YOUR_MODEL\"</span>\nmodel_method <span class=\"token operator\">=</span> <span class=\"token string\">\"YOUR_METHOD\"</span>\nargs <span class=\"token operator\">=</span> parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token constant\">YOUR_ARGUMENTS</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndbh<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO `delayed_jobs` (`failed_at`, `locked_by`, `created_at`, `handler`, `updated_at`, `priority`, `run_at`, `attempts`, `locked_at`, `last_error`) VALUES(NULL, NULL, '<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>db_time<span class=\"token delimiter tag\">}</span></span>', '--- !ruby/struct:Delayed::PerformableMethod \\nobject: LOAD;<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>model<span class=\"token delimiter tag\">}</span></span>\\nmethod: :<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>model_method<span class=\"token delimiter tag\">}</span></span>\\nargs: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>args<span class=\"token delimiter tag\">}</span></span>', '<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>db_time<span class=\"token delimiter tag\">}</span></span>', 0, '<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>db_time<span class=\"token delimiter tag\">}</span></span>', 0, NULL, NULL)\"</span><span class=\"token punctuation\">)</span></code></pre></div>","fields":{"slug":"/articles/recurring-delayed-job-with-cron","tagSlugs":["/tag/code/","/tag/ruby-on-rails/"]},"frontmatter":{"date":"2010-10-27","description":"This one is easy and I use it quite often - particularly to scrape data at certain times during the day, and generate nightly statistics and reports.","tags":["Code","Ruby on Rails"],"title":"Recurring delayed_job with cron"}}},"pageContext":{"slug":"/articles/recurring-delayed-job-with-cron"}},"staticQueryHashes":["1251057998","251939775","401334301"]}