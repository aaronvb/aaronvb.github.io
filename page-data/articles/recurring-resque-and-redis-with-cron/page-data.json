{"componentChunkName":"component---src-templates-post-template-js","path":"/articles/recurring-resque-and-redis-with-cron","result":{"data":{"markdownRemark":{"id":"f5020c7c-cfeb-509c-95ec-74d18bcb8364","html":"<p>Moving one of my projects over from delayed_job to resque/redis, for reasons I wont go into here, I needed to have a few of my workers on a cron job. I was initially going to use the resque-scheduler plugin, but the fact that it runs as a daemon made me a little nervous. I didn’t want to worry about watching the scheduler process for memory leaks and or crashes, and cron is a proven, reliable, scheduling service in itself.</p>\n<p>Basically, I took the same concept from my other post, <a href=\"/articles/recurring-delayed-job-with-cron\">Recurring delayed_job with cron</a> and applied it to redis, instead of using mysql as I did with delayed_job. It works by manually injecting jobs into the queue without using the Rails environment, saving memory, cpu, and time, and also able to be run externally by the system cron.</p>\n<p>In this example I’m going to use a Payment model, which holds payment information, and an ‘update’ method which should be run nightly at 0000. I’m using Rails 3 as well, which uses the ‘mysql2’ gem.</p>\n<p>This is the resque worker.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdatePayment</span>\n  <span class=\"token variable\">@queue</span> <span class=\"token operator\">=</span> <span class=\"token symbol\">:update_payment</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">perform</span></span><span class=\"token punctuation\">(</span>payment_id<span class=\"token punctuation\">)</span>\n    payment <span class=\"token operator\">=</span> <span class=\"token constant\">Payment</span><span class=\"token punctuation\">.</span>find_by_id<span class=\"token punctuation\">(</span>payment_id<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> payment\n      <span class=\"token comment\"># update payment logic goes here</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This is the ruby file that the cron will run. I usually place this in root.rails/lib/crons folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'redis'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'mysql2'</span>\n\n<span class=\"token comment\"># assuming redis is running on the default port.</span>\n<span class=\"token comment\"># if not, example: redis = Redis.new(:host => \"10.0.1.1\", :port => 6380)</span>\nredis <span class=\"token operator\">=</span> <span class=\"token constant\">Redis</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n\n<span class=\"token comment\"># Make sure queue exists, if not create it. When clearing a queue with the resque web interface, resque removes the queue, so here we just check to make sure it exists.</span>\n<span class=\"token keyword\">if</span> redis<span class=\"token punctuation\">.</span>sismember<span class=\"token punctuation\">(</span><span class=\"token string\">'resque:queues'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'update_payment'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span>\n  redis<span class=\"token punctuation\">.</span>sadd<span class=\"token punctuation\">(</span><span class=\"token string\">'resque:queues'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'update_payment'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># Mysql DB information</span>\nclient <span class=\"token operator\">=</span> <span class=\"token constant\">Mysql2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Client</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:host</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:username</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:database</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'your_project_development'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># query the db for all payment records</span>\nresults <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT `payments`.* FROM `payments` ORDER BY id asc\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># create a job in the update_payment queue that will update each payment, pass each payment id</span>\nresults<span class=\"token punctuation\">.</span><span class=\"token keyword\">each</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>row<span class=\"token operator\">|</span>\n  redis<span class=\"token punctuation\">.</span>rpush<span class=\"token punctuation\">(</span><span class=\"token string\">'resque:queue:update_payment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"{\\\"class\\\":\\\"UpdatePayment\\\",\\\"args\\\":[<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>row<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>]}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>And this is what goes in the crontab, which can be accessed by typing ‘crontab -e’ in the console.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># m h  dom mon dow   command</span>\n<span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>ruby <span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">/</span>file<span class=\"token operator\">/</span>cron_payment_update<span class=\"token punctuation\">.</span>rb</code></pre></div>\n<p>For reference:</p>\n<p>Redis - <a href=\"https://redis.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redis.io</a></p>\n<p>Resque - <a href=\"https://github.com/resque/resque\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/resque/resque</a></p>\n<p>Resque Intro - <a href=\"https://github.blog/2009-11-03-introducing-resque\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.blog/2009-11-03-introducing-resque</a></p>\n<p>Redis Ruby Gem(should get installed when installing resque) - <a href=\"https://github.com/redis/redis-rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/redis/redis-rb</a></p>","fields":{"slug":"/articles/recurring-resque-and-redis-with-cron","tagSlugs":["/tag/code/","/tag/ruby-on-rails/","/tag/redis/"]},"frontmatter":{"date":"2011-05-12","description":"Moving one of my projects over from delayed_job to resque/redis, for reasons I wont go into here, I needed to have a few of my workers on a cron job.","tags":["Code","Ruby on Rails","Redis"],"title":"Recurring resque and redis with cron","legacyArticleId":null}}},"pageContext":{"slug":"/articles/recurring-resque-and-redis-with-cron"}},"staticQueryHashes":["2255556206","251939775","401334301"]}