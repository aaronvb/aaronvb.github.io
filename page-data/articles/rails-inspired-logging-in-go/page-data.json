{"componentChunkName":"component---src-templates-post-template-js","path":"/articles/rails-inspired-logging-in-go","result":{"data":{"markdownRemark":{"id":"490f2db5-59ae-53a2-8c25-c8f6f98dc66b","html":"<p>One of the few things I miss from <a href=\"https://rubyonrails.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ruby on Rails</a> is the verbose logging the framework provides to you in development. If you’re not coming from Ruby on Rails I believe this will still be applicable and beneficial to your development in Go. </p>\n<p>Before we jump into the details, I’d like to preface this by saying this guide to logging is meant to be used in the <strong>development</strong> environment. While I think logging should be done in production as well, the depth of logging should be limited in any production environment where we need to take security into account. (Side note: The param logging package I’ve released will automatically filter passwords.)</p>\n<h3 id=\"the-rails-log\" style=\"position:relative;\"><a href=\"#the-rails-log\" aria-label=\"the rails log permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Rails Log</h3>\n<p>Below is an example of a standard log output by Rails.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Started GET \"/users?foo=bar\" for ::1 at 2021-01-18 22:16:58 -1000\nProcessing by UsersController#index as HTML\n  Parameters: {\"foo\"=>\"bar\"}\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"id\" ASC LIMIT ?  [[\"LIMIT\", 1]]\n  ↳ app/controllers/users_controller.rb:3:in `index'\nCompleted 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 0.2ms | Allocations: 973)</code></pre></div>\n<p>Breaking it down we start with the method used in the request, followed by the path and a timestamp.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Started GET \"/users?foo=bar\" for ::1 at 2021-01-18 22:16:58 -1000</code></pre></div>\n<p>Next we have the parameters passed to the request.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Parameters: {\"foo\"=>\"bar\"}</code></pre></div>\n<p>After that we have any queries processed during the request and the line where the query was run.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">User Load (0.2ms)  SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"id\" ASC LIMIT ?  [[\"LIMIT\", 1]]\n  ↳ app/controllers/users_controller.rb:3:in `index'</code></pre></div>\n<p>And the last line is the end of the request that contains the response status and time to completion.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Completed 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 0.2ms | Allocations: 973)</code></pre></div>\n<p>As you can see, all of these together provide very helpful details into every request.</p>\n<h3 id=\"the-go-log\" style=\"position:relative;\"><a href=\"#the-go-log\" aria-label=\"the go log permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Go Log</h3>\n<p>Out of the box Go won’t give you that kind of logging for web requests. </p>\n<p>Enter <a href=\"https://github.com/aaronvb/logrequest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">logrequest</a> and <a href=\"https://github.com/aaronvb/logparams\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">logparams</a>. I wrote these two packages to bring the above logging to your Go project. With one exception, the SQL query logging has to be handled manually, but no worries I’ll explain how I handle that at the end.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app_1      | Started GET \"/\" 172.19.0.1:64368 HTTP/1.1 at 2021-01-19 08:30:08\napp_1      |    SELECT id, name, email, created, active FROM users WHERE id = $1 [8]\napp_1      |    ↳ /app/pkg/models/postgres/users.go:75\napp_1      | Completed 200 in 2.1124ms</code></pre></div>\n<h4 id=\"middleware\" style=\"position:relative;\"><a href=\"#middleware\" aria-label=\"middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Middleware</h4>\n<p>To get <a href=\"https://github.com/aaronvb/logrequest\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">logrequest</a> and <a href=\"https://github.com/aaronvb/logparams\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">logparams</a> working, we’ll need to use it as middleware within the http request. If you’re not familiar with middleware, Alex Edwards has a great blog post covering it: <a href=\"https://www.alexedwards.net/blog/making-and-using-middleware\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.alexedwards.net/blog/making-and-using-middleware</a>.</p>\n<p>And we’ll be using <a href=\"https://github.com/gorilla/mux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gorilla/mux</a> to handle the middleware.</p>\n<h4 id=\"using-logrequest-and-logparams\" style=\"position:relative;\"><a href=\"#using-logrequest-and-logparams\" aria-label=\"using logrequest and logparams permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using logrequest and logparams</h4>\n<p>Below is an example application which I’ll break down.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"log\"</span>\n    <span class=\"token string\">\"net/http\"</span>\n    <span class=\"token string\">\"os\"</span>\n\n    <span class=\"token string\">\"github.com/aaronvb/logparams\"</span>\n    <span class=\"token string\">\"github.com/aaronvb/logrequest\"</span>\n\n    <span class=\"token string\">\"github.com/gorilla/mux\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> application <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    errorLog <span class=\"token operator\">*</span>log<span class=\"token punctuation\">.</span>Logger\n    infoLog  <span class=\"token operator\">*</span>log<span class=\"token punctuation\">.</span>Logger\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    infoLog <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"INFO\\t\"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Ltime<span class=\"token punctuation\">)</span>\n    errorLog <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERROR\\t\"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Ltime<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Lshortfile<span class=\"token punctuation\">)</span>\n\n    app <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>application<span class=\"token punctuation\">{</span>\n        errorLog<span class=\"token punctuation\">:</span> errorLog<span class=\"token punctuation\">,</span>\n        infoLog<span class=\"token punctuation\">:</span>  infoLog<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    srv <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">{</span>\n        Addr<span class=\"token punctuation\">:</span>     <span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span>\n        ErrorLog<span class=\"token punctuation\">:</span> errorLog<span class=\"token punctuation\">,</span>\n        Handler<span class=\"token punctuation\">:</span>  app<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    infoLog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting server on %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">:=</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    errorLog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>app <span class=\"token operator\">*</span>application<span class=\"token punctuation\">)</span> <span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> mux<span class=\"token punctuation\">.</span><span class=\"token function\">NewRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/foobar\"</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span>foobar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Methods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Middleware</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>logRequest<span class=\"token punctuation\">)</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>logParams<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>app <span class=\"token operator\">*</span>application<span class=\"token punctuation\">)</span> <span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Middleware</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>app <span class=\"token operator\">*</span>application<span class=\"token punctuation\">)</span> <span class=\"token function\">logRequest</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lr <span class=\"token operator\">:=</span> logrequest<span class=\"token punctuation\">.</span>LogRequest<span class=\"token punctuation\">{</span>Request<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">,</span> Writer<span class=\"token punctuation\">:</span> w<span class=\"token punctuation\">,</span> Handler<span class=\"token punctuation\">:</span> next<span class=\"token punctuation\">,</span> NewLine<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Timestamp<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n        lr<span class=\"token punctuation\">.</span><span class=\"token function\">ToLogger</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>infoLog<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>app <span class=\"token operator\">*</span>application<span class=\"token punctuation\">)</span> <span class=\"token function\">logParams</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lp <span class=\"token operator\">:=</span> logparams<span class=\"token punctuation\">.</span>LogParams<span class=\"token punctuation\">{</span>Request<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">}</span>\n        lp<span class=\"token punctuation\">.</span><span class=\"token function\">ToLogger</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>infoLog<span class=\"token punctuation\">)</span>\n        next<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First we need to make sure we create the log outputs and pass it to the application struct. These will be used by logrequest and logparam. Alternatively, you can have either package return a string instead of printing to a log output.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">infoLog <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"INFO\\t\"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Ltime<span class=\"token punctuation\">)</span>\nerrorLog <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERROR\\t\"</span><span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">.</span>Ldate<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Ltime<span class=\"token operator\">|</span>log<span class=\"token punctuation\">.</span>Lshortfile<span class=\"token punctuation\">)</span>\n\napp <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>application<span class=\"token punctuation\">{</span>\n    errorLog<span class=\"token punctuation\">:</span> errorLog<span class=\"token punctuation\">,</span>\n    infoLog<span class=\"token punctuation\">:</span>  infoLog<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the <code class=\"language-text\">routes</code> function, which we use as the <code class=\"language-text\">Handler</code>, we create a new mux router and pass the two middleware functions to it. Both of those middleware functions will use the libraries.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>app <span class=\"token operator\">*</span>application<span class=\"token punctuation\">)</span> <span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> mux<span class=\"token punctuation\">.</span><span class=\"token function\">NewRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/foobar\"</span><span class=\"token punctuation\">,</span> app<span class=\"token punctuation\">.</span>foobar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Methods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Middleware</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>logRequest<span class=\"token punctuation\">)</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>logParams<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">logRequest</code> middleware function creates a new logrequest struct where we pass the http <code class=\"language-text\">Request</code>, <code class=\"language-text\">Writer</code>, <code class=\"language-text\">Handler</code>, and two optional arguments to configure the output. The reason why we pass the <code class=\"language-text\">Handler</code> is so that we can hook into the end of the request to show the response status and total time for the request.</p>\n<p><code class=\"language-text\">Timestamp</code> (boolean) can be used to hide/show the timestamp at the start of the request. (<code class=\"language-text\">Started GET \"/\" 172.19.0.1:64368 HTTP/1.1 at 2021-01-19 08:30:08</code>)</p>\n<p><code class=\"language-text\">NewLine</code> (int) can be used to add line breaks between each request log output(Rails does this by default).</p>\n<p>We call <code class=\"language-text\">ToLogger</code> on the struct to print the request to the logger we created above.</p>\n<p>Note: We don’t need to call <code class=\"language-text\">next</code> like you would normally do with middleware — logrequest package will call this automatically.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>app <span class=\"token operator\">*</span>application<span class=\"token punctuation\">)</span> <span class=\"token function\">logRequest</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lp <span class=\"token operator\">:=</span> logrequest<span class=\"token punctuation\">.</span>LogRequest<span class=\"token punctuation\">{</span>Request<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">,</span> Writer<span class=\"token punctuation\">:</span> w<span class=\"token punctuation\">,</span> Handler<span class=\"token punctuation\">:</span> next<span class=\"token punctuation\">,</span> NewLine<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Timestamp<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n        lp<span class=\"token punctuation\">.</span><span class=\"token function\">ToLogger</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>infoLog<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">logParams</code> middleware function creates a new logparams struct where we pass just the <code class=\"language-text\">Request</code>. </p>\n<p>By default logparams will filter out <code class=\"language-text\">password</code> and <code class=\"language-text\">password_confirmation</code> params. This can be turned off by passing <code class=\"language-text\">ShowPassword: True</code> (do NOT recommend this).</p>\n<p>Also by default, logparams will hide empty parameters. This can be turned off by passing <code class=\"language-text\">ShowEmpty: true</code>.</p>\n<p>We call <code class=\"language-text\">ToLogger</code> on the struct to print the params to the logger we created above. </p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>app <span class=\"token operator\">*</span>application<span class=\"token punctuation\">)</span> <span class=\"token function\">logParams</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lp <span class=\"token operator\">:=</span> logparams<span class=\"token punctuation\">.</span>LogParams<span class=\"token punctuation\">{</span>Request<span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">}</span>\n        lp<span class=\"token punctuation\">.</span><span class=\"token function\">ToLogger</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">.</span>infoLog<span class=\"token punctuation\">)</span>\n        next<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"sql-query-logging\" style=\"position:relative;\"><a href=\"#sql-query-logging\" aria-label=\"sql query logging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SQL Query Logging</h4>\n<p>The final part of this is going to be subjective based on how you’ve structured your application. In my latest project the structure was influenced by <a href=\"https://lets-go.alexedwards.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alex Edwards Let’s Go!</a> book, which is a great dive into building a web application in Go. If you’ve read that, or use a similar structure, this should be easy to apply.</p>\n<p>In the <code class=\"language-text\">main.go</code> we’ll need to create a new log output, and pass that to the application model struct. In this example that’s going to be a User. We’re going to use this log output in the model to print the query.</p>\n<p>Note: <code class=\"language-text\">postgres</code> is a custom postgres package(ORM), that the models belong to and is not related to any official package.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">requestLog <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span>\n\napp <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>application<span class=\"token punctuation\">{</span>\n    errorLog<span class=\"token punctuation\">:</span>   errorLog<span class=\"token punctuation\">,</span>\n    infoLog<span class=\"token punctuation\">:</span>    infoLog<span class=\"token punctuation\">,</span>\n    requestLog<span class=\"token punctuation\">:</span> requestLog<span class=\"token punctuation\">,</span>\n    session<span class=\"token punctuation\">:</span>    session<span class=\"token punctuation\">,</span>\n    users<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>postgres<span class=\"token punctuation\">.</span>UserModel<span class=\"token punctuation\">{</span>\n        AppModels<span class=\"token punctuation\">:</span> postgres<span class=\"token punctuation\">.</span>AppModels<span class=\"token punctuation\">{</span>\n            DB<span class=\"token punctuation\">:</span>  db<span class=\"token punctuation\">,</span>\n            Log<span class=\"token punctuation\">:</span> requestLog<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In my custom <code class=\"language-text\">postgres</code> package I’ve created functions that wrap the <code class=\"language-text\">database/sql</code> query functions which will be used to print to the log output and execute the query.</p>\n<p>The line <code class=\"language-text\">_, file, line, _ := runtime.Caller(1)</code> is what we use to print the file and line number that is calling the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Package postgres is the ORM for the db</span>\n<span class=\"token keyword\">package</span> postgres\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"database/sql\"</span>\n    <span class=\"token string\">\"log\"</span>\n    <span class=\"token string\">\"runtime\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// AppModels is the struct that shares the functions between</span>\n<span class=\"token comment\">// each model. Requires DB and Log.</span>\n<span class=\"token keyword\">type</span> AppModels <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    DB  <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>DB\n    Log <span class=\"token operator\">*</span>log<span class=\"token punctuation\">.</span>Logger\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>AppModels<span class=\"token punctuation\">)</span> <span class=\"token function\">queryRow</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>Row <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\u001b[34;1m%s \\u001b[0m%v\"</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">Caller</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\u21B3 %s:%d\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">.</span><span class=\"token function\">QueryRow</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>AppModels<span class=\"token punctuation\">)</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sql<span class=\"token punctuation\">.</span>Rows<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\u001b[34;1m%s\"</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">Caller</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\u21B3 %s:%d\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>\n    row<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>AppModels<span class=\"token punctuation\">)</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>query <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\u001b[34;1m%s \\u001b[0m%v\"</span><span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">Caller</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    m<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\u21B3 %s:%d\"</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>\n\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>DB<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now we can use the above functions in the models to do things like find a User.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> postgres\n\n<span class=\"token keyword\">type</span> UserModel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    AppModels\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span>UserModel<span class=\"token punctuation\">)</span> <span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>models<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    u <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>models<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    stmt <span class=\"token operator\">:=</span> <span class=\"token string\">`SELECT id FROM users WHERE id = $1`</span>\n    row <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">queryRow</span><span class=\"token punctuation\">(</span>stmt<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">:=</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>u<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">Is</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> sql<span class=\"token punctuation\">.</span>ErrNoRows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> models<span class=\"token punctuation\">.</span>ErrNoRecord\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I hope that helps you get started with some awesome Rails inspired logging. There’s quite a lot going on in this blog post so please comment below or contact me if you have any questions.</p>","fields":{"slug":"/articles/rails-inspired-logging-in-go","tagSlugs":["/tag/code/","/tag/ruby-on-rails/","/tag/go/","/tag/logging/","/tag/middleware/"]},"frontmatter":{"date":"2021-01-18","description":"Verbose logging in development is one of the few things I miss about Ruby on Rails. I made two libraries to bring that to Go and explain how to set that up with middleware.","tags":["Code","Ruby on Rails","Go","Logging","Middleware"],"title":"Rails Inspired Logging in Go"}}},"pageContext":{"slug":"/articles/rails-inspired-logging-in-go"}},"staticQueryHashes":["1251057998","251939775","401334301"]}